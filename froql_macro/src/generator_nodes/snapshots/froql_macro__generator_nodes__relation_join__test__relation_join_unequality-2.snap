---
source: froql_macro/src/generator_nodes/relation_join.rs
expression: append
---
// follow relation
3 => {
    const REL_VAR: usize = 2;
    const REL_VAR_COMPONENTS: ::std::ops::Range<usize> = 3..5;
    if let Some(id) = rel_helper_0.next_related() {
        // get aid/row for entity in relation
        let (aid, arow) = bk.entities.get_archetype_unchecked(id);

        // if in target archetype set => go to next step
        if archetype_id_sets[REL_VAR].contains(&aid) {
            let a_ref = &mut a_refs[REL_VAR];
            *a_ref = &bk.archetypes[aid.as_index()];
            a_ref.find_multiple_columns(
                &components_2,
                &mut col_indexes[REL_VAR_COMPONENTS],
            );
            a_rows[REL_VAR] = arow;

            if
                (::std::ptr::eq(a_refs[0], a_refs[2])
                 && a_rows[0] == a_rows[2])
            ||
                (::std::ptr::eq(a_refs[2], a_refs[1])
                 && a_rows[2] == a_rows[1])
            {
            } else {
                current_step += 1;
            }
        }
    } else {
        current_step -= 1;
    }
}
